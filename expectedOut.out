struct Point{
    int x;
    int y;
    bool Point;
};

int f(int x, bool b) {
}

void g() {
    int a;
    bool b;
    struct Point p;
    (p(Point)).x(int) = a(int);
    b(bool) = (a(int) == 3);
    f(int,bool->int)((a(int) + ((p(Point)).y(int) * 2)), b(bool));
    g(->void)();
}

int var1;
int var2;
bool var3;
struct Point pt;
int func(int x, bool b) {
    int a1d1;
    var1(int)++;
    var2(int)--;
    b(bool) = (var1(int) < 3);
    a1d1(int) = (x(int) + var1(int));
    x(int) = (var1(int) + b(bool));
    x(int) = (var1(int) / b(bool));
    x(int) = (var1(int) * b(bool));
    var3(bool) = (var2(int) > var1(int));
    if (b(bool)) {
        return 21;
    }
    else {
        return 999999;
    }
}

int func1(int a, int b, bool c) {
    int var1;
    int var2;
    bool var3;
    int func1;
    struct Point pt;
    var2(int) = (var2(int) + var1(int));
    var1(int) = (var1(int) + var2(int));
    (pt(Point)).x(int) = var2(int);
    (pt(Point)).y(int) = var1(int);
    var1(int) = ((pt(Point)).x(int) + var2(int));
    (pt(Point)).y(int) = (var1(int) + var2(int));
    var2(int) = (pt(Point)).y(int);
    while ((b(int) < 2)) {
        int var1;
        var1(int) = 3;
    }
    return (pt(Point)).x(int);
}

void function2(int function2) {
    int a;
    bool b;
    struct Point p;
    b(bool) = (a(int) == 89);
    func(int,bool->int)(((a(int) + (p(Point)).y(int)) + ((p(Point)).x(int) * a(int))), b(bool));
    g(->void)();
}

int func3(int number, bool go) {
    if ((number(int) == 89)) {
        return number(int);
    }
    if ((number(int) > 3)) {
        int val;
        val(int) = number(int);
        val(int) = (val(int) - 1);
    }
    else {
        int val;
        val(int) = number(int);
        val(int) = (val(int) + 1);
    }
    if (go(bool)) {
        return func3(int,bool->int)((number(int) - 1), go(bool));
    }
    else {
        int number;
        bool go;
        number(int) = 3;
        go(bool) = (number(int) == 3);
        return number(int);
    }
}
